### 4 in a row

Το παιχνίδι αποτελείται από 7 στήλες με 6 θέσεις η κάθε στήλη. Οι 2 παίκτες παίζουν εναλλάξ προσπαθώντας να σχηματίσουν με τα πούλια του δικού τους 
χρώματος μία σειρά από 4, οριζόντια, κάθετα ή διαγώνια.

Κάθε ζευγάρι θα δημιουργήσει μία εκδοχή AI παίκτη για το παιχνίδι αυτό. 
Οι εφαρμογές θα πρέπει να είναι σε θέση να παίξουν η μία εναντίον της άλλης γι'αυτό το λόγο θα υλοποιούν το παρακάτω πρωτόκολλο.

Το πρόγραμμα θα πρέπει να δέχεται σαν είσοδο έαν JSON string που περιλαμβάνει μία λίστα από αριθμούς που αντιστοιχούν στην στήλη 
που έπαιξε κάθε παίκτης (διαβάζοντας κάποιο αρχείο, από το stdin, κάνοντας curl ή με όποιο άλλο τρόπο έχει νόημα για την κάθε γλώσσα προγραμματισμού). 
Η είσοδος του προγράμματος πρέπει να είναι "συμβατή" με την έξοδό του. Με άλλα λόγια, το πρόγραμμα πρέπει να μπορεί να παίζει εναντίον του εαυτού του. 
Το αποτέλεσμα της εκτέλεσης θα πρέπει να είναι ένα JSON string που οι τιμές του θα αντιστοιχούν στις παρακάτω περιπτώσεις:

1. Το πρόγραμμα ανίχνευσε μη επιτρεπτή κίνηση.
   Αυτό θα μπορούσε να συμβεί αν το πρόγραμμα του αντιπάλου (ή το δικό μας) δεν λειτουργεί σωστά με αποτέλεσμα να κάνει 
   μία κίνηση που δεν επιτρέπεται. π.χ. να προσπαθήσει να παίξει σε μία στήλη που είναι πλέον γεμάτη ή σε μία ανύπαρκτη στήλη. 
   Το JSON σε αυτήν την περίπτωση να είναι κάπως έτσι:

  { type: "invalid_me", moves: [1,1,1,1,1,1,1,1] }
  ή 
  { type: "invalid_opponent", moves: [1,1,1,1,1,1,1] }

  ανάλογα με τον αν το πρόγραμμα βρήκε invalid κίνηση δική του ή του αντιπάλου

  η λίστα "moves" είναι οι κινήσεις των παικτών μέχρι το σημείο που ανιχνεύτηκε η κίνηση που δεν επιτρέπεται.

2. Το πρόγραμμα ανίχνευσε νίκη ενός από τους 2 παίκτες ή ισοπαλία.
  Σε αυτήν την περίπτωση το JSON string θα είναι έτσι:

  { type: "i_lost", moves: [1,2,1,2,1,2,1] }

  ή

  { type: "i_won", moves: [1,2,1,2,1,2,1,3] }

  ή

  { type: "draw", moves: [1,2,1,2,1,2,1,2] }

  η λίστα "moves" είναι οι κινήσεις των παικτών μέχρι την κίνηση που έφερε την νίκη σε έναν από τους 2.
  Η τιμή "type" είναι "i_won" αν το πρόγραμμα που τρέχει είναι αυτό που νίκησε και "i_lost" αν το πρόγραμμα
  που τρέχει είναι αυτό που έχασε. Το πρόγραμμα γνωρίζει ποιες κινήσεις του αντιστοιχούν επειδή έχει λάβει ως input
  όλες τις κινήσεις μέχρι στιγμής και επίσης γνωρίζει ότι είναι η δική του σειρά να παίξει.

  Η εναλλάξ εκτέλεση των 2 προγραμμάτων είναι ευθύνη εξωτερικού script. Τα προγράμματα πρέπει να θεωρούν ότι εφ'όσον εκτελούνται είναι η σειρά τους.

  Αν το πρόγραμμα παίξει την τελευταία επιτρεπτή κίνηση αλλά δεν υπάρχει νικητής, η τιμή του "type" θα είναι "draw" και η λίστα "moves" θα περιλαμβάνει
  και την τελευταί κίνηση.

3. Το πρόγραμμα δεν ανίχνευσε τίποτα από τα παραπάνω και απλά παίζει την επόμενη κίνηση. Το JSON string θα μοιάζει κάπως έτσι:

  { type: "move", moves: [1,1] }

  η λίστα "moves" είναι η λίστα που έλαβε ως input με ένα επιπλέον στοιχείο στο τέλος της λίστας που αποτελεί την καινούργια κίνηση.
  
  
==================
  
mkara@DELLMK MINGW64 /tmp
$ cat runme.sh
curl -H "Content-Type: application/json" --data @body.json http://localhost:9090/score4/

mkara@DELLMK MINGW64 /tmp
$ cat body.json
{
        "type": "move",
        "moves": [1,1]
}

mkara@DELLMK MINGW64 /tmp
$ ./runme.sh
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100    68    0    32  100    36      8      9  0:00:04  0:00:04 --:--:--    14{"type":"correct","moves":[1,1]}

mkara@DELLMK MINGW64 /tmp
$

  